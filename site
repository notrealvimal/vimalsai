import React, { useState, useRef, useEffect } from "react";
// Assuming these are shadcn/ui components and are available in your project
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import * as Tone from 'tone'; // Import Tone.js

// Helper function to create a basic version of Input if not available
const FallbackInput = React.forwardRef(({ className, ...props }, ref) => (
  <input ref={ref} className={`p-2 border rounded-md ${className}`} {...props} />
));

// Helper function to create a basic version of Button if not available
const FallbackButton = ({ className, children, ...props }) => (
  <button className={`p-2 bg-blue-500 text-white rounded-md ${className}`} {...props}>
    {children}
  </button>
);

// Use actual components if available, otherwise fallbacks (for environments where "@/components/ui/*" might not resolve)
const ChatInput = Input || FallbackInput;
const ChatButton = Button || FallbackButton;


export default function ChatScreen() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const getGeminiReply = async (userInput) => {
    setIsTyping(true);
    let chatHistory = [{ role: "user", parts: [{ text: userInput }] }];
    // Example of including more history:
    // const recentMessages = messages.slice(-4); // Get last 4 messages (2 user, 2 AI)
    // chatHistory = recentMessages.map(msg => ({
    //   role: msg.type === 'user' ? 'user' : 'model',
    //   parts: [{ text: msg.text }]
    // }));
    // chatHistory.push({ role: "user", parts: [{ text: userInput }] });


    const payload = { contents: chatHistory };
    const apiKey = ""; // Canvas will provide the API key in runtime if this is empty
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("API Error:", errorData);
        return `Sorry, there was an error with the AI service (HTTP ${response.status}).`;
      }

      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        return result.candidates[0].content.parts[0].text;
      } else {
        console.error("API Error or malformed response:", result);
        if (result.promptFeedback && result.promptFeedback.blockReason) {
          return `Your request was blocked: ${result.promptFeedback.blockReason}. Please try a different prompt.`;
        }
        return "Sorry, I couldn't get a proper response from the AI.";
      }
    } catch (error) {
      console.error("Failed to fetch AI reply:", error);
      return "Sorry, I'm having trouble connecting to the AI. Please try again later.";
    } finally {
      setIsTyping(false);
    }
  };

  const handleSend = async () => {
    if (!input.trim()) return;
    const userText = input.trim();
    const newUserMessage = { type: "user", text: userText };
    setMessages((prevMessages) => [...prevMessages, newUserMessage]);
    setInput("");

    try {
      await Tone.start();
      const synth = new Tone.Synth().toDestination();
      synth.triggerAttackRelease("C4", "8n");
    } catch (error) {
      console.error("Tone.js audio playback failed:", error);
    }

    const aiText = await getGeminiReply(userText);
    const newAIMessage = { type: "ai", text: aiText };
    setMessages((prev) => [...prev, newAIMessage]);
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, isTyping]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-zinc-900 to-zinc-800 text-white font-sans flex flex-col justify-between px-2 sm:px-4 py-6">
      <style jsx global>{`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
          font-family: 'Inter', sans-serif;
          overscroll-behavior: none;
        }
        .user-message {
          background: linear-gradient(135deg, #0b84ff 60%, #3b82f6 100%);
          color: white;
          border-radius: 20px 20px 6px 20px;
          margin-left: auto;
          margin-right: 0;
          max-width: 80%;
          box-shadow: 0 2px 12px 0 rgba(11,132,255,0.10);
          animation: popIn 0.18s cubic-bezier(.4,2,.6,1) both;
          word-wrap: break-word;
        }
        .ai-message {
          background: linear-gradient(135deg, #fff 70%, #f3f4f6 100%);
          color: #18181b;
          border-radius: 20px 20px 20px 6px;
          margin-right: auto;
          margin-left: 0;
          max-width: 80%;
          box-shadow: 0 2px 12px 0 rgba(0,0,0,0.07);
          animation: popIn 0.18s cubic-bezier(.4,2,.6,1) both;
          word-wrap: break-word;
        }
        @keyframes popIn {
          0% { transform: scale(0.95) translateY(10px); opacity: 0; }
          100% { transform: scale(1) translateY(0); opacity: 1; }
        }
        .chat-divider {
          border: none;
          border-top: 1.5px solid #27272a;
          margin: 24px 0 18px 0;
        }
        .social-link {
          transition: color 0.15s, transform 0.15s;
        }
        .social-link:hover {
          color: #0b84ff;
          transform: translateY(-2px) scale(1.07);
        }
        .chat-messages-container::-webkit-scrollbar {
            width: 6px;
        }
        .chat-messages-container::-webkit-scrollbar-thumb {
            background-color: #3f3f46; /* zinc-700 */
            border-radius: 3px;
        }
        .chat-messages-container::-webkit-scrollbar-track {
            background-color: transparent;
        }
      `}</style>
      <div className="max-w-lg w-full mx-auto flex flex-col h-full">
        <div className="text-center mb-6">
          <h1 className="text-3xl font-semibold tracking-tight drop-shadow-sm">Vimal</h1>
          <p className="text-zinc-400 text-base font-medium">
            Founder &amp; CEO,
            <a href="https://www.trekato.com/" className="social-link inline-block ml-1" target="_blank" rel="noopener noreferrer">
              Trekato
            </a>
          </p>
        </div>

        <div className="bg-zinc-900/90 border border-zinc-800 rounded-3xl p-7 space-y-5 shadow-xl">
          <div className="text-3xl font-medium text-white leading-tight">
            Fuck Portfolio, I built my own AI Clone.
          </div>
          <div className="text-sm text-zinc-400 leading-relaxed">
            Yo, Startup Founders! Wanna ship your product 10x faster than a SpaceX
            launch, design UI so fire it'd make Apple sweat, and bank $1M ARR in 180
            days? Ask my AI clone how I make that magic happen.
            <br />
            <br />
            Dreaming of hosting a sushi tour in Seoul and getting paid? Ask my AI how
            Trekato hooks you up with travelers dying for your local expertise.
            <br />
            <br />
            Just wanna know what's up with me? Ask my AI what games I'm grinding,
            what tunes I'm blasting, what I'm chowing down on, or how I can level up
            your life.
            <br />
            <br />
            <span className="font-semibold text-zinc-200">No login BS, no snooping</span>—I can't see your chats. Wanna connect? Ask my AI
            for my number or socials. Have fun.
          </div>
        </div>

        <hr className="chat-divider" />

        <div className="flex-grow overflow-y-auto space-y-3 min-h-[120px] chat-messages-container pr-2">
          {messages.map((msg, idx) => (
            <div
              key={idx}
              className={`${msg.type === "user" ? "user-message" : "ai-message"} p-3 px-4 w-fit text-base font-normal shadow-sm`}
              aria-live="polite"
            >
              {msg.text}
            </div>
          ))}
          {isTyping && (
            <div className="ai-message p-3 px-4 w-fit italic text-zinc-500 animate-pulse">Thinking like real Vimal...</div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input form area - Updated className */}
        <form
          onSubmit={(e) => {
            e.preventDefault();
            handleSend();
          }}
          className="flex items-center mt-auto gap-2 bg-zinc-900/80 border border-zinc-800 rounded-full px-3 py-2 shadow-lg" // Removed focus-within ring and adjusted padding
        >
          <ChatInput
            aria-label="Message input"
            placeholder="Type..."
            className="flex-grow bg-transparent border-none text-white placeholder-zinc-500 focus:ring-0 focus:outline-none text-base px-2"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            autoComplete="off"
          />
          <ChatButton
            type="submit"
            aria-label="Send message"
            className="ml-1 bg-gradient-to-tr from-blue-500 to-blue-400 text-white font-bold rounded-full px-4 py-2 shadow-md hover:from-blue-600 hover:to-blue-500 focus:ring-2 focus:ring-blue-400 focus:outline-none transition-all"
            disabled={!input.trim() || isTyping}
          >
            <span className="text-lg">➤</span>
          </ChatButton>
        </form>
      </div>

      <div className="mt-10 text-sm text-zinc-500 text-center select-none">
        <div className="flex justify-center gap-5 mb-2">
          <a href="mailto:vimalsreal@gmail.com" className="social-link">Email</a>
          <a href="https://twitter.com/vimalsreal" className="social-link" target="_blank" rel="noopener noreferrer">Twitter</a>
          <a href="https://www.linkedin.com/in/vimalsreal/" className="social-link" target="_blank" rel="noopener noreferrer">LinkedIn</a>
          <a href="https://www.instagram.com/vimalsreal/" className="social-link" target="_blank" rel="noopener noreferrer">Instagram</a>
        </div>
        <div className="text-xs text-zinc-600">©2025, Vimalsreal</div>
      </div>
    </div>
  );
}
