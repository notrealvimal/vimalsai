import React, { useState, useRef, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

export default function ChatScreen() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const audioRef = useRef(null);
  const messagesEndRef = useRef(null);

  const fakeAIReply = async (userInput) => {
    // Replace with actual AI call
    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay
    return `You said: "${userInput}". Ask me something deeper. ðŸ˜‰`;
  };

  const handleSend = async () => {
    if (!input.trim()) return;
    const userText = input.trim();
    const newUserMessage = { type: "user", text: userText };
    setMessages((prevMessages) => [...prevMessages, newUserMessage]);
    setInput("");

    try {
      if (audioRef.current && audioRef.current.readyState >= 2) {
        audioRef.current.currentTime = 0;
        await audioRef.current.play();
      }
    } catch (error) {
      console.error("Audio playback failed:", error);
    }

    setIsTyping(true);
    const aiText = await fakeAIReply(userText);
    const newAIMessage = { type: "ai", text: aiText };
    setTimeout(() => {
      setMessages((prev) => [...prev, newAIMessage]);
      setIsTyping(false);
    }, 1000);
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, isTyping]);

  return (
    <div className="min-h-screen bg-black text-white font-sans flex flex-col justify-between px-2 sm:px-4 py-6">
      <style jsx global>{`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
          font-family: 'Inter', sans-serif;
        }
        .user-message {
          background-color: #0b84ff;
          color: white;
          border-radius: 18px 18px 0px 18px;
          margin-left: auto;
          margin-right: 0;
          max-width: 80%;
        }
        .ai-message {
          background-color: white;
          color: black;
          border-radius: 18px 18px 18px 0px;
          margin-right: auto;
          margin-left: 0;
          max-width: 80%;
        }
      `}</style>
      <div className="max-w-lg w-full mx-auto">
        <div className="text-center mb-6">
          <h1 className="text-3xl font-bold">Vimal</h1>
          <p className="text-zinc-400">Founder & CEO, Trekato</p>
        </div>

        <div className="bg-zinc-900 border border-zinc-800 rounded-2xl p-5 space-y-4">
          <div className="text-4xl font-bold text-white">
            Fuck Portfolio, I built my own AI Clone.
          </div>
          <div className="text-sm text-zinc-400">
            Yo, Startup Founders! Wanna ship your product 10x faster than a SpaceX
            launch, design UI so fire itâ€™d make Apple sweat, and bank $1M ARR in 180
            days? Ask my AI clone how I make that magic happen.
            <br />
            <br />
            Dreaming of hosting a sushi tour in Seoul and getting paid? Ask my AI how
            Trekato hooks you up with travelers dying for your local expertise.
            <br />
            <br />
            Just wanna know whatâ€™s up with me? Ask my AI what games Iâ€™m grinding,
            what tunes Iâ€™m blasting, what Iâ€™m chowing down on, or how I can level up
            your life.
            <br />
            <br />
            No login BS, no snoopingâ€”I canâ€™t see your chats, Wanna connect? Ask my AI
            for my number or socials. Have fun.
          </div>
        </div>

        <div className="my-6 space-y-3">
          {messages.map((msg, idx) => (
            <div
              key={idx}
              className={`${msg.type === "user" ? "user-message" : "ai-message"} p-3 w-fit`}
            >
              {msg.text}
            </div>
          ))}
          {isTyping && (
            <div className="ai-message p-3 w-fit italic text-zinc-500">Thinking like real Vimal...</div>
          )}
          <div ref={messagesEndRef} />
        </div>

        <form
          onSubmit={(e) => {
            e.preventDefault();
            handleSend();
          }}
          className="flex items-center mt-6"
        >
          <Input
            aria-label="Message input"
            placeholder="Type..."
            className="flex-grow bg-zinc-800 border-zinc-700 text-white"
            value={input}
            onChange={(e) => setInput(e.target.value)}
          />
          <Button
            type="submit"
            aria-label="Send message"
            className="ml-2 bg-white text-black hover:bg-zinc-200"
          >
            âž¤
          </Button>
        </form>

        <div className="mt-10 text-sm text-zinc-500 text-center">
          <div className="flex justify-center gap-4 mb-2">
            <a href="#" className="hover:underline">Email</a>
            <a href="#" className="hover:underline">Twitter</a>
            <a href="#" className="hover:underline">LinkedIn</a>
            <a href="#" className="hover:underline">Instagram</a>
          </div>
          <div>Â©2025, Vimalsreal</div>
        </div>
      </div>
      <audio ref={audioRef} src="/sounds/message-sent.mp3" preload="auto" />
    </div>
  );
}

